import React, { useState } from 'react';
import { Download, FileText, Calendar, CheckCircle, Settings, ArrowLeft, BookOpen, Video, ExternalLink, Sparkles } from 'lucide-react';
import { UserAssessment, LearningPath } from '../types';

interface PDFDownloaderProps {
  onBack: () => void;
  assessment: UserAssessment;
  learningPath: LearningPath;
}

const PDFDownloader: React.FC<PDFDownloaderProps> = ({ onBack, assessment, learningPath }) => {
  const [selectedSections, setSelectedSections] = useState({
    profile: true,
    roadmap: true,
    problems: true,
    videos: true,
    theory: true,
    schedule: true
  });
  const [isGenerating, setIsGenerating] = useState(false);
  const [generated, setGenerated] = useState(false);

  const handleSectionToggle = (section: keyof typeof selectedSections) => {
    setSelectedSections(prev => ({
      ...prev,
      [section]: !prev[section]
    }));
  };

  const generatePDF = async () => {
    setIsGenerating(true);
    
    try {
      // Simulate PDF generation with proper async handling
      await new Promise(resolve => setTimeout(resolve, 3000));
      
      // Create a mock PDF content
      const pdfContent = generatePDFContent();
      const blob = new Blob([pdfContent], { type: 'text/plain' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = 'DSA-Learning-Guide.txt';
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
      
      setGenerated(true);
      setTimeout(() => setGenerated(false), 3000);
    } catch (error) {
      console.error('Error generating PDF:', error);
    } finally {
      setIsGenerating(false);
    }
  };

  const generatePDFContent = (): string => {
    let content = "DSA LEARNING PATHWAY - COMPREHENSIVE GUIDE\n";
    content += "=".repeat(50) + "\n\n";
    
    if (selectedSections.profile) {
      content += "LEARNER PROFILE\n";
      content += "-".repeat(20) + "\n";
      content += `Stage: ${assessment.stage}\n`;
      content += `Programming Level: ${assessment.programmingLevel}\n`;
      content += `Daily Hours: ${assessment.dailyHours}\n`;
      content += `Goal: ${assessment.goal}\n`;
      content += `Languages: ${assessment.languages.join(', ')}\n\n`;
    }
    
    if (selectedSections.roadmap) {
      content += "LEARNING ROADMAP\n";
      content += "-".repeat(20) + "\n";
      content += `Title: ${learningPath.title}\n`;
      content += `Description: ${learningPath.description}\n`;
      content += `Duration: ${learningPath.duration}\n\n`;
      content += "Topics Covered:\n";
      learningPath.topics.forEach((topic, index) => {
        content += `${index + 1}. ${topic}\n`;
      });
      content += "\n";
    }
    
    if (selectedSections.schedule) {
      content += "DAILY LEARNING SCHEDULE\n";
      content += "-".repeat(20) + "\n";
      learningPath.dailyPlan.forEach(day => {
        content += `Day ${day.day}: ${day.topic}\n`;
        content += `Theory: ${day.theory.join(', ')}\n`;
        content += `Practice: ${day.practice.join(', ')}\n`;
        content += `Videos: ${day.videos.join(', ')}\n\n`;
      });
    }
    
    if (selectedSections.problems) {
      content += "RECOMMENDED PRACTICE PROBLEMS\n";
      content += "-".repeat(20) + "\n";
      content += "1. Two Sum - https://leetcode.com/problems/two-sum/\n";
      content += "2. Binary Search - https://leetcode.com/problems/binary-search/\n";
      content += "3. Valid Parentheses - https://leetcode.com/problems/valid-parentheses/\n";
      content += "4. Merge Two Sorted Lists - https://leetcode.com/problems/merge-two-sorted-lists/\n";
      content += "5. Maximum Subarray - https://leetcode.com/problems/maximum-subarray/\n";
      content += "... and many more\n\n";
    }
    
    if (selectedSections.videos) {
      content += "RECOMMENDED VIDEOS\n";
      content += "-".repeat(20) + "\n";
      content += "1. Complete DSA Course - Striver\n";
      content += "2. Arrays Tutorial - Apna College\n";
      content += "3. Linked Lists - CodeWithHarry\n";
      content += "4. Binary Trees - Apna College\n";
      content += "5. Dynamic Programming - Striver\n";
      content += "... and many more\n\n";
    }
    
    if (selectedSections.theory) {
      content += "THEORY RESOURCES\n";
      content += "-".repeat(20) + "\n";
      content += "1. GeeksforGeeks - Data Structures\n";
      content += "2. JavaTPoint - Algorithm Tutorials\n";
      content += "3. W3Schools - DSA Reference\n";
      content += "... and many more\n\n";
    }
    
    content += "Good luck with your DSA learning journey!\n";
    content += "Generated by DSA Learning Pathway App";
    
    return content;
  };

  const sections = [
    { id: 'profile', title: 'Learner Profile', description: 'Your assessment results and preferences', icon: Settings, gradient: 'from-periwinkle to-dusty-rose' },
    { id: 'roadmap', title: 'Learning Roadmap', description: 'Personalized learning path and topics', icon: Calendar, gradient: 'from-dusty-rose to-pale-pink' },
    { id: 'schedule', title: 'Daily Schedule', description: 'Day-wise learning plan with tasks', icon: Calendar, gradient: 'from-pale-pink to-periwinkle' },
    { id: 'problems', title: 'Practice Problems', description: 'Curated coding challenges with links', icon: BookOpen, gradient: 'from-periwinkle to-dusty-rose' },
    { id: 'videos', title: 'Video Resources', description: 'YouTube tutorial recommendations', icon: Video, gradient: 'from-dusty-rose to-pale-pink' },
    { id: 'theory', title: 'Theory Articles', description: 'Reference materials and documentation', icon: FileText, gradient: 'from-pale-pink to-periwinkle' }
  ] as const;

  const hasSelectedSections = Object.values(selectedSections).some(v => v);
  const allSectionsDeselected = Object.values(selectedSections).every(v => !v);

  return (
    <div className="min-h-screen bg-gradient-to-br from-space-dark via-space-blue to-dark-navy py-12 px-4 relative overflow-hidden">
      {/* Animated background elements */}
      <div className="absolute inset-0">
        <div className="absolute top-20 left-10 w-2 h-2 bg-periwinkle rounded-full animate-pulse"></div>
        <div className="absolute top-40 right-20 w-1 h-1 bg-dusty-rose rounded-full animate-pulse delay-1000"></div>
        <div className="absolute bottom-32 left-1/4 w-1.5 h-1.5 bg-pale-pink rounded-full animate-pulse delay-500"></div>
        <div className="absolute top-1/3 right-1/3 w-1 h-1 bg-periwinkle rounded-full animate-pulse delay-700"></div>
        <div className="absolute bottom-20 right-10 w-2 h-2 bg-dusty-rose rounded-full animate-pulse delay-300"></div>
      </div>

      <div className="max-w-5xl mx-auto relative z-10">
        {/* Header */}
        <div className="text-center mb-12 animate-fade-in">
           
          <div className="w-16 h-16 bg-gradient-to-br from-periwinkle to-dusty-rose rounded-2xl mx-auto mb-4 flex items-center justify-center animate-glow">
            <Download className="w-10 h-10 text-white" />
          </div>
          <div className="absolute top-8 left-1/2 transform -translate-x-1/2 -translate-y-2">
            <Sparkles className="w-6 h-6 text-pale-pink animate-bounce" />
          </div>
          <h1 className="text-4xl font-bold text-white mb-2">PDF Study Guide Generator</h1>
          <p className="text-xl text-pale-pink/70 max-w-2xl mx-auto">
            Create a comprehensive offline study guide with your personalized learning path
          </p>
        </div>

        {/* PDF Preview */}
        <div className="bg-space-light/30 backdrop-blur-sm rounded-3xl shadow-xl p-8 mb-8 border border-periwinkle/20 animate-slide-up">
          <h2 className="text-2xl font-bold text-white mb-6 flex items-center">
            <div className="w-8 h-8 bg-gradient-to-br from-periwinkle to-dusty-rose rounded-lg mr-3 flex items-center justify-center">
              <FileText className="w-5 h-5 text-white" />
            </div>
            PDF Content Selection
          </h2>
          
          <div className="grid md:grid-cols-2 gap-6">
            {sections.map((section, index) => (
              <div
                key={section.id}
                className={`group border-2 rounded-xl p-6 cursor-pointer transition-all duration-300 animate-slide-up ${
                  selectedSections[section.id]
                    ? 'border-periwinkle/40 bg-gradient-to-br from-periwinkle/10 to-dusty-rose/10 shadow-lg'
                    : 'border-periwinkle/20 bg-space-light/30 hover:border-periwinkle/40 hover:bg-space-light/50'
                }`}
                onClick={() => handleSectionToggle(section.id)}
                role="checkbox"
                aria-checked={selectedSections[section.id]}
                tabIndex={0}
                style={{ animationDelay: `${200 + index * 100}ms` }}
                onKeyDown={(e) => {
                  if (e.key === 'Enter' || e.key === ' ') {
                    e.preventDefault();
                    handleSectionToggle(section.id);
                  }
                }}
              >
                <div className="flex items-start space-x-4">
                  <div className={`w-12 h-12 rounded-lg flex items-center justify-center transition-all duration-300 ${
                    selectedSections[section.id]
                      ? `bg-gradient-to-br ${section.gradient} text-white shadow-lg`
                      : 'bg-space-light/50 text-pale-pink/70 group-hover:bg-space-light/70'
                  }`}>
                    <section.icon className="w-6 h-6" />
                  </div>
                  
                  <div className="flex-1">
                    <div className="flex items-center justify-between mb-2">
                      <h3 className="font-semibold text-white group-hover:text-periwinkle transition-colors duration-300">{section.title}</h3>
                      {selectedSections[section.id] && (
                        <CheckCircle className="w-5 h-5 text-periwinkle animate-pulse" />
                      )}
                    </div>
                    <p className="text-sm text-pale-pink/70">{section.description}</p>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>

        {/* PDF Features */}
        <div className="bg-gradient-to-r from-periwinkle to-dusty-rose rounded-3xl shadow-xl p-8 mb-8 text-white animate-slide-up delay-400">
          <h2 className="text-2xl font-bold mb-6">What's Included in Your PDF</h2>
          <div className="grid md:grid-cols-2 gap-6">
            <div className="space-y-4">
              <div className="flex items-center space-x-3">
                <CheckCircle className="w-5 h-5 text-pale-pink/90" />
                <span>Complete day-wise learning schedule</span>
              </div>
              <div className="flex items-center space-x-3">
                <CheckCircle className="w-5 h-5 text-pale-pink/90" />
                <span>Direct links to practice problems</span>
              </div>
              <div className="flex items-center space-x-3">
                <CheckCircle className="w-5 h-5 text-pale-pink/90" />
                <span>YouTube video recommendations</span>
              </div>
            </div>
            <div className="space-y-4">
              <div className="flex items-center space-x-3">
                <CheckCircle className="w-5 h-5 text-pale-pink/90" />
                <span>Theory articles and references</span>
              </div>
              <div className="flex items-center space-x-3">
                <CheckCircle className="w-5 h-5 text-pale-pink/90" />
                <span>Progress tracking checklist</span>
              </div>
              <div className="flex items-center space-x-3">
                <CheckCircle className="w-5 h-5 text-pale-pink/90" />
                <span>Offline access for study anywhere</span>
              </div>
            </div>
          </div>
        </div>

        {/* Generate Button */}
        <div className="text-center animate-slide-up delay-500">
          {!isGenerating && !generated && (
            <button
              onClick={generatePDF}
              disabled={allSectionsDeselected}
              className={`inline-flex items-center px-12 py-4 rounded-2xl font-bold text-lg transition-all duration-300 ${
                hasSelectedSections
                  ? 'bg-gradient-to-r from-periwinkle to-dusty-rose hover:from-periwinkle/90 hover:to-dusty-rose/90 text-white shadow-xl hover:shadow-2xl transform hover:-translate-y-1'
                  : 'bg-space-light/30 text-pale-pink/50 cursor-not-allowed border border-periwinkle/20'
              }`}
            >
              <Download className="w-6 h-6 mr-3" />
              Generate PDF Study Guide
            </button>
          )}
          
          {isGenerating && (
            <div className="inline-flex items-center px-12 py-4 bg-gradient-to-r from-periwinkle to-dusty-rose text-white rounded-2xl font-bold text-lg">
              <div className="animate-spin rounded-full h-6 w-6 border-b-2 border-white mr-3"></div>
              Generating Your PDF...
            </div>
          )}
          
          {generated && (
            <div className="inline-flex items-center px-12 py-4 bg-gradient-to-r from-periwinkle/80 to-dusty-rose/80 text-white rounded-2xl font-bold text-lg animate-pulse">
              <CheckCircle className="w-6 h-6 mr-3" />
              PDF Generated Successfully!
            </div>
          )}
          
          {allSectionsDeselected && (
            <p className="text-pale-pink/60 mt-4">Please select at least one section to generate PDF</p>
          )}
        </div>

        {/* Info Note */}
        <div className="bg-space-light/30 border border-periwinkle/20 rounded-2xl p-6 mt-8 backdrop-blur-sm animate-fade-in delay-600">
          <div className="flex items-start space-x-3">
            <ExternalLink className="w-6 h-6 text-periwinkle flex-shrink-0 mt-1" />
            <div>
              <h3 className="font-semibold text-white mb-2">Note about External Links</h3>
              <p className="text-pale-pink/70 text-sm leading-relaxed">
                The generated PDF will contain direct links to practice problems, videos, and articles. 
                While the PDF can be used offline, you'll need an internet connection to access the linked resources.
              </p>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default PDFDownloader;